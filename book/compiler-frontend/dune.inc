(rule
 (target findlib.conf)
 (action (write-file %{target} "")))

(alias
 (name   runtest)
 (deps   (:x README.md)
         (:conf findlib.conf)
         (package mdx)
         (package core)
         (package ppx_jane)
         (:y14 ../../examples/code/front-end/alice.ml)
         (:y13 ../../examples/code/front-end/alice.mli)
         (:y12 ../../examples/code/front-end/alice_combined.ml)
         (:y11 ../../examples/code/front-end/broken_module.ml)
         (:y10 ../../examples/code/front-end/broken_poly.ml)
         (:y9 ../../examples/code/front-end/broken_poly_with_annot.ml)
         (:y8 ../../examples/code/front-end/conflicting_interface.ml)
         (:y7 ../../examples/code/front-end/conflicting_interface.mli)
         (:y6 ../../examples/code/front-end/doc.ml)
         (:y5 ../../examples/code/front-end/fixed_module.ml)
         (:y4 ../../examples/code/front-end/follow_on_function.ml)
         (:y3 ../../examples/code/front-end/non_principal.ml)
         (:y2 ../../examples/code/front-end/principal.ml)
         (:y1 ../../examples/code/front-end/typedef.ml)
         (:y0 ../../examples/code/packing/test.ml)
         (source_tree ../../examples/code)
         (source_tree ../../examples/code/ffi)
         (source_tree ../../examples/code/front-end)
         (source_tree ../../examples/code/packing)
         prelude.ml)
 (locks ../../global-lock)
 (action (progn
           (setenv OCAMLFIND_CONF %{conf} (run ocaml-mdx test --prelude=prelude.ml --direction=to-ml %{x}))
           (diff? %{y14} %{y14}.corrected)
           (diff? %{y13} %{y13}.corrected)
           (diff? %{y12} %{y12}.corrected)
           (diff? %{y11} %{y11}.corrected)
           (diff? %{y10} %{y10}.corrected)
           (diff? %{y9} %{y9}.corrected)
           (diff? %{y8} %{y8}.corrected)
           (diff? %{y7} %{y7}.corrected)
           (diff? %{y6} %{y6}.corrected)
           (diff? %{y5} %{y5}.corrected)
           (diff? %{y4} %{y4}.corrected)
           (diff? %{y3} %{y3}.corrected)
           (diff? %{y2} %{y2}.corrected)
           (diff? %{y1} %{y1}.corrected)
           (diff? %{y0} %{y0}.corrected)
           (diff? %{x} %{x}.corrected))))
(alias
 (name   runtest-all)
 (deps   (:x README.md)
         (:conf findlib.conf)
         (package mdx)
         (package core)
         (package ppx_jane)
         (:y14 ../../examples/code/front-end/alice.ml)
         (:y13 ../../examples/code/front-end/alice.mli)
         (:y12 ../../examples/code/front-end/alice_combined.ml)
         (:y11 ../../examples/code/front-end/broken_module.ml)
         (:y10 ../../examples/code/front-end/broken_poly.ml)
         (:y9 ../../examples/code/front-end/broken_poly_with_annot.ml)
         (:y8 ../../examples/code/front-end/conflicting_interface.ml)
         (:y7 ../../examples/code/front-end/conflicting_interface.mli)
         (:y6 ../../examples/code/front-end/doc.ml)
         (:y5 ../../examples/code/front-end/fixed_module.ml)
         (:y4 ../../examples/code/front-end/follow_on_function.ml)
         (:y3 ../../examples/code/front-end/non_principal.ml)
         (:y2 ../../examples/code/front-end/principal.ml)
         (:y1 ../../examples/code/front-end/typedef.ml)
         (:y0 ../../examples/code/packing/test.ml)
         (source_tree ../../examples/code)
         (source_tree ../../examples/code/ffi)
         (source_tree ../../examples/code/front-end)
         (source_tree ../../examples/code/packing)
         prelude.ml)
 (locks ../../global-lock)
 (action (progn
           (setenv OCAMLFIND_CONF %{conf} (run ocaml-mdx test --prelude=prelude.ml --direction=to-ml --non-deterministic %{x}))
           (diff? %{y14} %{y14}.corrected)
           (diff? %{y13} %{y13}.corrected)
           (diff? %{y12} %{y12}.corrected)
           (diff? %{y11} %{y11}.corrected)
           (diff? %{y10} %{y10}.corrected)
           (diff? %{y9} %{y9}.corrected)
           (diff? %{y8} %{y8}.corrected)
           (diff? %{y7} %{y7}.corrected)
           (diff? %{y6} %{y6}.corrected)
           (diff? %{y5} %{y5}.corrected)
           (diff? %{y4} %{y4}.corrected)
           (diff? %{y3} %{y3}.corrected)
           (diff? %{y2} %{y2}.corrected)
           (diff? %{y1} %{y1}.corrected)
           (diff? %{y0} %{y0}.corrected)
           (diff? %{x} %{x}.corrected))))
