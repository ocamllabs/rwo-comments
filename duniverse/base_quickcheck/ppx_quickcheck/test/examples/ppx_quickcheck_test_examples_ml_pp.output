open Base
open Base_quickcheck
module Simple_reference =
  struct
    type t = bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator = quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer = quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker = quickcheck_shrinker_bool
    let _ = quickcheck_shrinker
  end
module Dotted_reference =
  struct
    type t = Simple_reference.t[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator = Simple_reference.quickcheck_generator
    let _ = quickcheck_generator
    let quickcheck_observer = Simple_reference.quickcheck_observer
    let _ = quickcheck_observer
    let quickcheck_shrinker = Simple_reference.quickcheck_shrinker
    let _ = quickcheck_shrinker
  end
module Nonrec_reference =
  struct
    open Dotted_reference
    type nonrec t = t[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator = quickcheck_generator
    let _ = quickcheck_generator
    let quickcheck_observer = quickcheck_observer
    let _ = quickcheck_observer
    let quickcheck_shrinker = quickcheck_shrinker
    let _ = quickcheck_shrinker
  end
module Application_of_polymorphic_type =
  struct
    type t = bool option[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      quickcheck_generator_option quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      quickcheck_observer_option quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      quickcheck_shrinker_option quickcheck_shrinker_bool
    let _ = quickcheck_shrinker
  end
module Tuple =
  struct
    type t = (bool * unit option)[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.create
        (fun ~size:_size__007_ ->
           fun ~random:_random__008_ ->
             ((Base_quickcheck.Generator.generate quickcheck_generator_bool
                 ~size:_size__007_ ~random:_random__008_),
               (Base_quickcheck.Generator.generate
                  (quickcheck_generator_option quickcheck_generator_unit)
                  ~size:_size__007_ ~random:_random__008_)))
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun (_x__003_, _x__004_) ->
           fun ~size:_size__005_ ->
             fun ~hash:_hash__006_ ->
               let _hash__006_ =
                 Base_quickcheck.Observer.observe quickcheck_observer_bool
                   _x__003_ ~size:_size__005_ ~hash:_hash__006_ in
               let _hash__006_ =
                 Base_quickcheck.Observer.observe
                   (quickcheck_observer_option quickcheck_observer_unit)
                   _x__004_ ~size:_size__005_ ~hash:_hash__006_ in
               _hash__006_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (fun (_x__001_, _x__002_) ->
           Base.Sequence.round_robin
             [Base.Sequence.map
                (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                   _x__001_) ~f:(fun _x__001_ -> (_x__001_, _x__002_));
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink
                  (quickcheck_shrinker_option quickcheck_shrinker_unit)
                  _x__002_) ~f:(fun _x__002_ -> (_x__001_, _x__002_))])
    let _ = quickcheck_shrinker
  end
module Poly_variant =
  struct
    type t =
      [ `A  | `B  | `C of bool  | `D of bool  | `E of (bool * unit option) 
      | `F of (bool * unit option) ][@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.union
        [Base_quickcheck.Generator.create
           (fun ~size:_size__032_ -> fun ~random:_random__033_ -> `A);
        Base_quickcheck.Generator.create
          (fun ~size:_size__034_ -> fun ~random:_random__035_ -> `B);
        Base_quickcheck.Generator.create
          (fun ~size:_size__036_ ->
             fun ~random:_random__037_ ->
               `C
                 (Base_quickcheck.Generator.generate
                    quickcheck_generator_bool ~size:_size__036_
                    ~random:_random__037_));
        Base_quickcheck.Generator.create
          (fun ~size:_size__038_ ->
             fun ~random:_random__039_ ->
               `D
                 (Base_quickcheck.Generator.generate
                    quickcheck_generator_bool ~size:_size__038_
                    ~random:_random__039_));
        Base_quickcheck.Generator.create
          (fun ~size:_size__042_ ->
             fun ~random:_random__043_ ->
               `E
                 (Base_quickcheck.Generator.generate
                    (Base_quickcheck.Generator.create
                       (fun ~size:_size__040_ ->
                          fun ~random:_random__041_ ->
                            ((Base_quickcheck.Generator.generate
                                quickcheck_generator_bool ~size:_size__040_
                                ~random:_random__041_),
                              (Base_quickcheck.Generator.generate
                                 (quickcheck_generator_option
                                    quickcheck_generator_unit)
                                 ~size:_size__040_ ~random:_random__041_))))
                    ~size:_size__042_ ~random:_random__043_));
        Base_quickcheck.Generator.create
          (fun ~size:_size__046_ ->
             fun ~random:_random__047_ ->
               `F
                 (Base_quickcheck.Generator.generate
                    (Base_quickcheck.Generator.create
                       (fun ~size:_size__044_ ->
                          fun ~random:_random__045_ ->
                            ((Base_quickcheck.Generator.generate
                                quickcheck_generator_bool ~size:_size__044_
                                ~random:_random__045_),
                              (Base_quickcheck.Generator.generate
                                 (quickcheck_generator_option
                                    quickcheck_generator_unit)
                                 ~size:_size__044_ ~random:_random__045_))))
                    ~size:_size__046_ ~random:_random__047_))]
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun _x__017_ ->
           fun ~size:_size__018_ ->
             fun ~hash:_hash__019_ ->
               match _x__017_ with
               | `A ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 65 in
                   _hash__019_
               | `B ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 66 in
                   _hash__019_
               | `C _x__020_ ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 67 in
                   let _hash__019_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__020_ ~size:_size__018_
                       ~hash:_hash__019_ in
                   _hash__019_
               | `D _x__021_ ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 68 in
                   let _hash__019_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__021_ ~size:_size__018_
                       ~hash:_hash__019_ in
                   _hash__019_
               | `E _x__026_ ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 69 in
                   let _hash__019_ =
                     Base_quickcheck.Observer.observe
                       (Base_quickcheck.Observer.create
                          (fun (_x__022_, _x__023_) ->
                             fun ~size:_size__024_ ->
                               fun ~hash:_hash__025_ ->
                                 let _hash__025_ =
                                   Base_quickcheck.Observer.observe
                                     quickcheck_observer_bool _x__022_
                                     ~size:_size__024_ ~hash:_hash__025_ in
                                 let _hash__025_ =
                                   Base_quickcheck.Observer.observe
                                     (quickcheck_observer_option
                                        quickcheck_observer_unit) _x__023_
                                     ~size:_size__024_ ~hash:_hash__025_ in
                                 _hash__025_)) _x__026_ ~size:_size__018_
                       ~hash:_hash__019_ in
                   _hash__019_
               | `F _x__031_ ->
                   let _hash__019_ = Base.hash_fold_int _hash__019_ 70 in
                   let _hash__019_ =
                     Base_quickcheck.Observer.observe
                       (Base_quickcheck.Observer.create
                          (fun (_x__027_, _x__028_) ->
                             fun ~size:_size__029_ ->
                               fun ~hash:_hash__030_ ->
                                 let _hash__030_ =
                                   Base_quickcheck.Observer.observe
                                     quickcheck_observer_bool _x__027_
                                     ~size:_size__029_ ~hash:_hash__030_ in
                                 let _hash__030_ =
                                   Base_quickcheck.Observer.observe
                                     (quickcheck_observer_option
                                        quickcheck_observer_unit) _x__028_
                                     ~size:_size__029_ ~hash:_hash__030_ in
                                 _hash__030_)) _x__031_ ~size:_size__018_
                       ~hash:_hash__019_ in
                   _hash__019_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (function
         | `A -> Base.Sequence.round_robin []
         | `B -> Base.Sequence.round_robin []
         | `C _x__009_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                     _x__009_) ~f:(fun _x__009_ -> `C _x__009_)]
         | `D _x__010_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                     _x__010_) ~f:(fun _x__010_ -> `D _x__010_)]
         | `E _x__011_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (Base_quickcheck.Shrinker.create
                        (fun (_x__012_, _x__013_) ->
                           Base.Sequence.round_robin
                             [Base.Sequence.map
                                (Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_bool _x__012_)
                                ~f:(fun _x__012_ -> (_x__012_, _x__013_));
                             Base.Sequence.map
                               (Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_option
                                     quickcheck_shrinker_unit) _x__013_)
                               ~f:(fun _x__013_ -> (_x__012_, _x__013_))]))
                     _x__011_) ~f:(fun _x__011_ -> `E _x__011_)]
         | `F _x__014_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (Base_quickcheck.Shrinker.create
                        (fun (_x__015_, _x__016_) ->
                           Base.Sequence.round_robin
                             [Base.Sequence.map
                                (Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_bool _x__015_)
                                ~f:(fun _x__015_ -> (_x__015_, _x__016_));
                             Base.Sequence.map
                               (Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_option
                                     quickcheck_shrinker_unit) _x__016_)
                               ~f:(fun _x__016_ -> (_x__015_, _x__016_))]))
                     _x__014_) ~f:(fun _x__014_ -> `F _x__014_)])
    let _ = quickcheck_shrinker
  end
module Inherit_poly_variant =
  struct
    type t = [ `X  | Poly_variant.t | `Z of unit option ][@@deriving
                                                           quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.union
        [Base_quickcheck.Generator.create
           (fun ~size:_size__055_ -> fun ~random:_random__056_ -> `X);
        Base_quickcheck.Generator.create
          (fun ~size:_size__057_ ->
             fun ~random:_random__058_ ->
               (Base_quickcheck.Generator.generate
                  Poly_variant.quickcheck_generator ~size:_size__057_
                  ~random:_random__058_ : Poly_variant.t  :> [ `X 
                                                             | Poly_variant.t
                                                             | `Z of
                                                                 unit option ]));
        Base_quickcheck.Generator.create
          (fun ~size:_size__059_ ->
             fun ~random:_random__060_ ->
               `Z
                 (Base_quickcheck.Generator.generate
                    (quickcheck_generator_option quickcheck_generator_unit)
                    ~size:_size__059_ ~random:_random__060_))]
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun _x__050_ ->
           fun ~size:_size__051_ ->
             fun ~hash:_hash__052_ ->
               match _x__050_ with
               | `X ->
                   let _hash__052_ = Base.hash_fold_int _hash__052_ 88 in
                   _hash__052_
               | #Poly_variant.t as _x__053_ ->
                   let _hash__052_ =
                     Base_quickcheck.Observer.observe
                       Poly_variant.quickcheck_observer _x__053_
                       ~size:_size__051_ ~hash:_hash__052_ in
                   _hash__052_
               | `Z _x__054_ ->
                   let _hash__052_ = Base.hash_fold_int _hash__052_ 90 in
                   let _hash__052_ =
                     Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__054_ ~size:_size__051_ ~hash:_hash__052_ in
                   _hash__052_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (function
         | `X -> Base.Sequence.round_robin []
         | #Poly_variant.t as _x__048_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     Poly_variant.quickcheck_shrinker _x__048_)
                  ~f:(fun _x__048_ ->
                        (_x__048_ : Poly_variant.t  :> [ `X  | Poly_variant.t
                                                       | `Z of unit option ]))]
         | `Z _x__049_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (quickcheck_shrinker_option quickcheck_shrinker_unit)
                     _x__049_) ~f:(fun _x__049_ -> `Z _x__049_)])
    let _ = quickcheck_shrinker
  end
module Record_type =
  struct
    type t = {
      x: bool ;
      y: unit option }[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.create
        (fun ~size:_size__067_ ->
           fun ~random:_random__068_ ->
             {
               x =
                 (Base_quickcheck.Generator.generate
                    quickcheck_generator_bool ~size:_size__067_
                    ~random:_random__068_);
               y =
                 (Base_quickcheck.Generator.generate
                    (quickcheck_generator_option quickcheck_generator_unit)
                    ~size:_size__067_ ~random:_random__068_)
             })
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun { x = _x__063_; y = _x__064_ } ->
           fun ~size:_size__065_ ->
             fun ~hash:_hash__066_ ->
               let _hash__066_ =
                 Base_quickcheck.Observer.observe quickcheck_observer_bool
                   _x__063_ ~size:_size__065_ ~hash:_hash__066_ in
               let _hash__066_ =
                 Base_quickcheck.Observer.observe
                   (quickcheck_observer_option quickcheck_observer_unit)
                   _x__064_ ~size:_size__065_ ~hash:_hash__066_ in
               _hash__066_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (fun { x = _x__061_; y = _x__062_ } ->
           Base.Sequence.round_robin
             [Base.Sequence.map
                (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                   _x__061_)
                ~f:(fun _x__061_ -> { x = _x__061_; y = _x__062_ });
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink
                  (quickcheck_shrinker_option quickcheck_shrinker_unit)
                  _x__062_)
               ~f:(fun _x__062_ -> { x = _x__061_; y = _x__062_ })])
    let _ = quickcheck_shrinker
  end
module Nullary_and_unary_variant =
  struct
    type t =
      | A 
      | B 
      | C of unit 
      | D of unit [@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.union
        [Base_quickcheck.Generator.create
           (fun ~size:_size__076_ -> fun ~random:_random__077_ -> A);
        Base_quickcheck.Generator.create
          (fun ~size:_size__078_ -> fun ~random:_random__079_ -> B);
        Base_quickcheck.Generator.create
          (fun ~size:_size__080_ ->
             fun ~random:_random__081_ ->
               C
                 (Base_quickcheck.Generator.generate
                    quickcheck_generator_unit ~size:_size__080_
                    ~random:_random__081_));
        Base_quickcheck.Generator.create
          (fun ~size:_size__082_ ->
             fun ~random:_random__083_ ->
               D
                 (Base_quickcheck.Generator.generate
                    quickcheck_generator_unit ~size:_size__082_
                    ~random:_random__083_))]
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun _x__071_ ->
           fun ~size:_size__072_ ->
             fun ~hash:_hash__073_ ->
               match _x__071_ with
               | A ->
                   let _hash__073_ = Base.hash_fold_int _hash__073_ 0 in
                   _hash__073_
               | B ->
                   let _hash__073_ = Base.hash_fold_int _hash__073_ 1 in
                   _hash__073_
               | C _x__074_ ->
                   let _hash__073_ = Base.hash_fold_int _hash__073_ 2 in
                   let _hash__073_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_unit _x__074_ ~size:_size__072_
                       ~hash:_hash__073_ in
                   _hash__073_
               | D _x__075_ ->
                   let _hash__073_ = Base.hash_fold_int _hash__073_ 3 in
                   let _hash__073_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_unit _x__075_ ~size:_size__072_
                       ~hash:_hash__073_ in
                   _hash__073_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (function
         | A -> Base.Sequence.round_robin []
         | B -> Base.Sequence.round_robin []
         | C _x__069_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_unit
                     _x__069_) ~f:(fun _x__069_ -> C _x__069_)]
         | D _x__070_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_unit
                     _x__070_) ~f:(fun _x__070_ -> D _x__070_)])
    let _ = quickcheck_shrinker
  end
module Binary_and_record_variant =
  struct
    type t =
      | A of bool * [ `X  | `Y  | `Z of unit ] 
      | B of bool * [ `X  | `Y  | `Z of unit ] 
      | C of {
      x: unit option ;
      mutable y: bool } 
      | D of {
      x: unit option ;
      mutable y: bool } [@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.union
        [Base_quickcheck.Generator.create
           (fun ~size:_size__119_ ->
              fun ~random:_random__120_ ->
                A
                  ((Base_quickcheck.Generator.generate
                      quickcheck_generator_bool ~size:_size__119_
                      ~random:_random__120_),
                    (Base_quickcheck.Generator.generate
                       (Base_quickcheck.Generator.union
                          [Base_quickcheck.Generator.create
                             (fun ~size:_size__113_ ->
                                fun ~random:_random__114_ -> `X);
                          Base_quickcheck.Generator.create
                            (fun ~size:_size__115_ ->
                               fun ~random:_random__116_ -> `Y);
                          Base_quickcheck.Generator.create
                            (fun ~size:_size__117_ ->
                               fun ~random:_random__118_ ->
                                 `Z
                                   (Base_quickcheck.Generator.generate
                                      quickcheck_generator_unit
                                      ~size:_size__117_ ~random:_random__118_))])
                       ~size:_size__119_ ~random:_random__120_)));
        Base_quickcheck.Generator.create
          (fun ~size:_size__127_ ->
             fun ~random:_random__128_ ->
               B
                 ((Base_quickcheck.Generator.generate
                     quickcheck_generator_bool ~size:_size__127_
                     ~random:_random__128_),
                   (Base_quickcheck.Generator.generate
                      (Base_quickcheck.Generator.union
                         [Base_quickcheck.Generator.create
                            (fun ~size:_size__121_ ->
                               fun ~random:_random__122_ -> `X);
                         Base_quickcheck.Generator.create
                           (fun ~size:_size__123_ ->
                              fun ~random:_random__124_ -> `Y);
                         Base_quickcheck.Generator.create
                           (fun ~size:_size__125_ ->
                              fun ~random:_random__126_ ->
                                `Z
                                  (Base_quickcheck.Generator.generate
                                     quickcheck_generator_unit
                                     ~size:_size__125_ ~random:_random__126_))])
                      ~size:_size__127_ ~random:_random__128_)));
        Base_quickcheck.Generator.create
          (fun ~size:_size__129_ ->
             fun ~random:_random__130_ ->
               C
                 {
                   x =
                     (Base_quickcheck.Generator.generate
                        (quickcheck_generator_option
                           quickcheck_generator_unit) ~size:_size__129_
                        ~random:_random__130_);
                   y =
                     (Base_quickcheck.Generator.generate
                        quickcheck_generator_bool ~size:_size__129_
                        ~random:_random__130_)
                 });
        Base_quickcheck.Generator.create
          (fun ~size:_size__131_ ->
             fun ~random:_random__132_ ->
               D
                 {
                   x =
                     (Base_quickcheck.Generator.generate
                        (quickcheck_generator_option
                           quickcheck_generator_unit) ~size:_size__131_
                        ~random:_random__132_);
                   y =
                     (Base_quickcheck.Generator.generate
                        quickcheck_generator_bool ~size:_size__131_
                        ~random:_random__132_)
                 })]
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun _x__094_ ->
           fun ~size:_size__095_ ->
             fun ~hash:_hash__096_ ->
               match _x__094_ with
               | A (_x__101_, _x__102_) ->
                   let _hash__096_ = Base.hash_fold_int _hash__096_ 0 in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__101_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       (Base_quickcheck.Observer.create
                          (fun _x__097_ ->
                             fun ~size:_size__098_ ->
                               fun ~hash:_hash__099_ ->
                                 match _x__097_ with
                                 | `X ->
                                     let _hash__099_ =
                                       Base.hash_fold_int _hash__099_ 88 in
                                     _hash__099_
                                 | `Y ->
                                     let _hash__099_ =
                                       Base.hash_fold_int _hash__099_ 89 in
                                     _hash__099_
                                 | `Z _x__100_ ->
                                     let _hash__099_ =
                                       Base.hash_fold_int _hash__099_ 90 in
                                     let _hash__099_ =
                                       Base_quickcheck.Observer.observe
                                         quickcheck_observer_unit _x__100_
                                         ~size:_size__098_ ~hash:_hash__099_ in
                                     _hash__099_)) _x__102_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   _hash__096_
               | B (_x__107_, _x__108_) ->
                   let _hash__096_ = Base.hash_fold_int _hash__096_ 1 in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__107_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       (Base_quickcheck.Observer.create
                          (fun _x__103_ ->
                             fun ~size:_size__104_ ->
                               fun ~hash:_hash__105_ ->
                                 match _x__103_ with
                                 | `X ->
                                     let _hash__105_ =
                                       Base.hash_fold_int _hash__105_ 88 in
                                     _hash__105_
                                 | `Y ->
                                     let _hash__105_ =
                                       Base.hash_fold_int _hash__105_ 89 in
                                     _hash__105_
                                 | `Z _x__106_ ->
                                     let _hash__105_ =
                                       Base.hash_fold_int _hash__105_ 90 in
                                     let _hash__105_ =
                                       Base_quickcheck.Observer.observe
                                         quickcheck_observer_unit _x__106_
                                         ~size:_size__104_ ~hash:_hash__105_ in
                                     _hash__105_)) _x__108_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   _hash__096_
               | C { x = _x__109_; y = _x__110_ } ->
                   let _hash__096_ = Base.hash_fold_int _hash__096_ 2 in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__109_ ~size:_size__095_ ~hash:_hash__096_ in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__110_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   _hash__096_
               | D { x = _x__111_; y = _x__112_ } ->
                   let _hash__096_ = Base.hash_fold_int _hash__096_ 3 in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__111_ ~size:_size__095_ ~hash:_hash__096_ in
                   let _hash__096_ =
                     Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__112_ ~size:_size__095_
                       ~hash:_hash__096_ in
                   _hash__096_)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (function
         | A (_x__084_, _x__085_) ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                     _x__084_) ~f:(fun _x__084_ -> A (_x__084_, _x__085_));
               Base.Sequence.map
                 (Base_quickcheck.Shrinker.shrink
                    (Base_quickcheck.Shrinker.create
                       (function
                        | `X -> Base.Sequence.round_robin []
                        | `Y -> Base.Sequence.round_robin []
                        | `Z _x__086_ ->
                            Base.Sequence.round_robin
                              [Base.Sequence.map
                                 (Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_unit _x__086_)
                                 ~f:(fun _x__086_ -> `Z _x__086_)])) _x__085_)
                 ~f:(fun _x__085_ -> A (_x__084_, _x__085_))]
         | B (_x__087_, _x__088_) ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                     _x__087_) ~f:(fun _x__087_ -> B (_x__087_, _x__088_));
               Base.Sequence.map
                 (Base_quickcheck.Shrinker.shrink
                    (Base_quickcheck.Shrinker.create
                       (function
                        | `X -> Base.Sequence.round_robin []
                        | `Y -> Base.Sequence.round_robin []
                        | `Z _x__089_ ->
                            Base.Sequence.round_robin
                              [Base.Sequence.map
                                 (Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_unit _x__089_)
                                 ~f:(fun _x__089_ -> `Z _x__089_)])) _x__088_)
                 ~f:(fun _x__088_ -> B (_x__087_, _x__088_))]
         | C { x = _x__090_; y = _x__091_ } ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (quickcheck_shrinker_option quickcheck_shrinker_unit)
                     _x__090_)
                  ~f:(fun _x__090_ -> C { x = _x__090_; y = _x__091_ });
               Base.Sequence.map
                 (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                    _x__091_)
                 ~f:(fun _x__091_ -> C { x = _x__090_; y = _x__091_ })]
         | D { x = _x__092_; y = _x__093_ } ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (quickcheck_shrinker_option quickcheck_shrinker_unit)
                     _x__092_)
                  ~f:(fun _x__092_ -> D { x = _x__092_; y = _x__093_ });
               Base.Sequence.map
                 (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_bool
                    _x__093_)
                 ~f:(fun _x__093_ -> D { x = _x__092_; y = _x__093_ })])
    let _ = quickcheck_shrinker
  end
module Simple_arrow =
  struct
    type t = unit option -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.fn
        (quickcheck_observer_option quickcheck_observer_unit)
        quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.fn
        (quickcheck_generator_option quickcheck_generator_unit)
        quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Named_arrow =
  struct
    type t = x:unit option -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.map
        ~f:(fun _f__135_ -> fun ~x:_x__136_ -> _f__135_ _x__136_)
        (Base_quickcheck.Generator.fn
           (quickcheck_observer_option quickcheck_observer_unit)
           quickcheck_generator_bool)
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.unmap
        ~f:(fun _f__133_ -> fun _x__134_ -> _f__133_ ~x:_x__134_)
        (Base_quickcheck.Observer.fn
           (quickcheck_generator_option quickcheck_generator_unit)
           quickcheck_observer_bool)
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Optional_arrow =
  struct
    type t = ?x:unit option -> unit -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.map
        ~f:(fun _f__139_ -> fun ?x:_x__140_ -> _f__139_ _x__140_)
        (Base_quickcheck.Generator.fn
           (Base_quickcheck.Observer.option
              (quickcheck_observer_option quickcheck_observer_unit))
           (Base_quickcheck.Generator.fn quickcheck_observer_unit
              quickcheck_generator_bool))
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.unmap
        ~f:(fun _f__137_ -> fun _x__138_ -> _f__137_ ?x:_x__138_)
        (Base_quickcheck.Observer.fn
           (Base_quickcheck.Generator.option
              (quickcheck_generator_option quickcheck_generator_unit))
           (Base_quickcheck.Observer.fn quickcheck_generator_unit
              quickcheck_observer_bool))
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Curried_arrow =
  struct
    type t = unit option -> bool option -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.fn
        (quickcheck_observer_option quickcheck_observer_unit)
        (Base_quickcheck.Generator.fn
           (quickcheck_observer_option quickcheck_observer_bool)
           quickcheck_generator_bool)
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.fn
        (quickcheck_generator_option quickcheck_generator_unit)
        (Base_quickcheck.Observer.fn
           (quickcheck_generator_option quickcheck_generator_bool)
           quickcheck_observer_bool)
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Simple_higher_order =
  struct
    type t = (unit option -> bool option) -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.fn
        (Base_quickcheck.Observer.fn
           (quickcheck_generator_option quickcheck_generator_unit)
           (quickcheck_observer_option quickcheck_observer_bool))
        quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.fn
        (Base_quickcheck.Generator.fn
           (quickcheck_observer_option quickcheck_observer_unit)
           (quickcheck_generator_option quickcheck_generator_bool))
        quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Named_higher_order =
  struct
    type t = (x:unit option -> bool option) -> bool[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.fn
        (Base_quickcheck.Observer.unmap
           ~f:(fun _f__143_ -> fun _x__144_ -> _f__143_ ~x:_x__144_)
           (Base_quickcheck.Observer.fn
              (quickcheck_generator_option quickcheck_generator_unit)
              (quickcheck_observer_option quickcheck_observer_bool)))
        quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.fn
        (Base_quickcheck.Generator.map
           ~f:(fun _f__141_ -> fun ~x:_x__142_ -> _f__141_ _x__142_)
           (Base_quickcheck.Generator.fn
              (quickcheck_observer_option quickcheck_observer_unit)
              (quickcheck_generator_option quickcheck_generator_bool)))
        quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Optional_higher_order =
  struct
    type t = (?x:unit option -> unit -> bool option) -> bool[@@deriving
                                                              quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Base_quickcheck.Generator.fn
        (Base_quickcheck.Observer.unmap
           ~f:(fun _f__147_ -> fun _x__148_ -> _f__147_ ?x:_x__148_)
           (Base_quickcheck.Observer.fn
              (Base_quickcheck.Generator.option
                 (quickcheck_generator_option quickcheck_generator_unit))
              (Base_quickcheck.Observer.fn quickcheck_generator_unit
                 (quickcheck_observer_option quickcheck_observer_bool))))
        quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      Base_quickcheck.Observer.fn
        (Base_quickcheck.Generator.map
           ~f:(fun _f__145_ -> fun ?x:_x__146_ -> _f__145_ _x__146_)
           (Base_quickcheck.Generator.fn
              (Base_quickcheck.Observer.option
                 (quickcheck_observer_option quickcheck_observer_unit))
              (Base_quickcheck.Generator.fn quickcheck_observer_unit
                 (quickcheck_generator_option quickcheck_generator_bool))))
        quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker = Base_quickcheck.Shrinker.atomic
    let _ = quickcheck_shrinker
  end
module Poly_unary =
  struct
    type 'a t = 'a list[@@deriving quickcheck]
    let _ = fun (_ : 'a t) -> ()
    let quickcheck_generator _generator__151_ =
      quickcheck_generator_list _generator__151_
    let _ = quickcheck_generator
    let quickcheck_observer _observer__150_ =
      quickcheck_observer_list _observer__150_
    let _ = quickcheck_observer
    let quickcheck_shrinker _shrinker__149_ =
      quickcheck_shrinker_list _shrinker__149_
    let _ = quickcheck_shrinker
  end
module Instance_of_unary =
  struct
    type t = bool Poly_unary.t[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Poly_unary.quickcheck_generator quickcheck_generator_bool
    let _ = quickcheck_generator
    let quickcheck_observer =
      Poly_unary.quickcheck_observer quickcheck_observer_bool
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Poly_unary.quickcheck_shrinker quickcheck_shrinker_bool
    let _ = quickcheck_shrinker
  end
module Poly_binary =
  struct
    type ('a, 'b) t = ('a * 'b)[@@deriving quickcheck]
    let _ = fun (_ : ('a, 'b) t) -> ()
    let quickcheck_generator _generator__162_ _generator__163_ =
      Base_quickcheck.Generator.create
        (fun ~size:_size__164_ ->
           fun ~random:_random__165_ ->
             ((Base_quickcheck.Generator.generate _generator__162_
                 ~size:_size__164_ ~random:_random__165_),
               (Base_quickcheck.Generator.generate _generator__163_
                  ~size:_size__164_ ~random:_random__165_)))
    let _ = quickcheck_generator
    let quickcheck_observer _observer__156_ _observer__157_ =
      Base_quickcheck.Observer.create
        (fun (_x__158_, _x__159_) ->
           fun ~size:_size__160_ ->
             fun ~hash:_hash__161_ ->
               let _hash__161_ =
                 Base_quickcheck.Observer.observe _observer__156_ _x__158_
                   ~size:_size__160_ ~hash:_hash__161_ in
               let _hash__161_ =
                 Base_quickcheck.Observer.observe _observer__157_ _x__159_
                   ~size:_size__160_ ~hash:_hash__161_ in
               _hash__161_)
    let _ = quickcheck_observer
    let quickcheck_shrinker _shrinker__152_ _shrinker__153_ =
      Base_quickcheck.Shrinker.create
        (fun (_x__154_, _x__155_) ->
           Base.Sequence.round_robin
             [Base.Sequence.map
                (Base_quickcheck.Shrinker.shrink _shrinker__152_ _x__154_)
                ~f:(fun _x__154_ -> (_x__154_, _x__155_));
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink _shrinker__153_ _x__155_)
               ~f:(fun _x__155_ -> (_x__154_, _x__155_))])
    let _ = quickcheck_shrinker
  end
module Instance_of_binary =
  struct
    type t = (bool, unit option) Poly_binary.t[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Poly_binary.quickcheck_generator quickcheck_generator_bool
        (quickcheck_generator_option quickcheck_generator_unit)
    let _ = quickcheck_generator
    let quickcheck_observer =
      Poly_binary.quickcheck_observer quickcheck_observer_bool
        (quickcheck_observer_option quickcheck_observer_unit)
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Poly_binary.quickcheck_shrinker quickcheck_shrinker_bool
        (quickcheck_shrinker_option quickcheck_shrinker_unit)
    let _ = quickcheck_shrinker
  end
module Poly_with_variance =
  struct
    type (-'a, +'b) t = ('b * ('a -> 'b))[@@deriving quickcheck]
    let _ = fun (_ : ('a, 'b) t) -> ()
    let quickcheck_generator _observer__176_ _generator__177_ =
      Base_quickcheck.Generator.create
        (fun ~size:_size__178_ ->
           fun ~random:_random__179_ ->
             ((Base_quickcheck.Generator.generate _generator__177_
                 ~size:_size__178_ ~random:_random__179_),
               (Base_quickcheck.Generator.generate
                  (Base_quickcheck.Generator.fn _observer__176_
                     _generator__177_) ~size:_size__178_
                  ~random:_random__179_)))
    let _ = quickcheck_generator
    let quickcheck_observer _generator__170_ _observer__171_ =
      Base_quickcheck.Observer.create
        (fun (_x__172_, _x__173_) ->
           fun ~size:_size__174_ ->
             fun ~hash:_hash__175_ ->
               let _hash__175_ =
                 Base_quickcheck.Observer.observe _observer__171_ _x__172_
                   ~size:_size__174_ ~hash:_hash__175_ in
               let _hash__175_ =
                 Base_quickcheck.Observer.observe
                   (Base_quickcheck.Observer.fn _generator__170_
                      _observer__171_) _x__173_ ~size:_size__174_
                   ~hash:_hash__175_ in
               _hash__175_)
    let _ = quickcheck_observer
    let quickcheck_shrinker _shrinker__166_ _shrinker__167_ =
      Base_quickcheck.Shrinker.create
        (fun (_x__168_, _x__169_) ->
           Base.Sequence.round_robin
             [Base.Sequence.map
                (Base_quickcheck.Shrinker.shrink _shrinker__167_ _x__168_)
                ~f:(fun _x__168_ -> (_x__168_, _x__169_));
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink
                  Base_quickcheck.Shrinker.atomic _x__169_)
               ~f:(fun _x__169_ -> (_x__168_, _x__169_))])
    let _ = quickcheck_shrinker
  end
module Instance_with_variance =
  struct
    type t = (bool, unit option) Poly_with_variance.t
    let quickcheck_generator =
      Poly_with_variance.quickcheck_generator quickcheck_observer_bool
        (quickcheck_generator_option quickcheck_generator_unit)
    let quickcheck_observer =
      Poly_with_variance.quickcheck_observer quickcheck_generator_bool
        (quickcheck_observer_option quickcheck_observer_unit)
    let quickcheck_shrinker =
      Poly_with_variance.quickcheck_shrinker quickcheck_shrinker_bool
        (quickcheck_shrinker_option quickcheck_shrinker_unit)
  end
module Poly_with_phantom =
  struct
    type _ t = unit option[@@deriving quickcheck]
    let _ = fun (_ : _ t) -> ()
    let quickcheck_generator _generator__185_ =
      quickcheck_generator_option quickcheck_generator_unit
    let _ = quickcheck_generator
    let quickcheck_observer _observer__183_ =
      quickcheck_observer_option quickcheck_observer_unit
    let _ = quickcheck_observer
    let quickcheck_shrinker _shrinker__181_ =
      quickcheck_shrinker_option quickcheck_shrinker_unit
    let _ = quickcheck_shrinker
  end
module Instance_with_phantom =
  struct
    type t = [ `phantom ] Poly_with_phantom.t[@@deriving quickcheck]
    let _ = fun (_ : t) -> ()
    let quickcheck_generator =
      Poly_with_phantom.quickcheck_generator
        (Base_quickcheck.Generator.union
           [Base_quickcheck.Generator.create
              (fun ~size:_size__189_ -> fun ~random:_random__190_ -> `phantom)])
    let _ = quickcheck_generator
    let quickcheck_observer =
      Poly_with_phantom.quickcheck_observer
        (Base_quickcheck.Observer.create
           (fun _x__186_ ->
              fun ~size:_size__187_ ->
                fun ~hash:_hash__188_ ->
                  match _x__186_ with
                  | `phantom ->
                      let _hash__188_ =
                        Base.hash_fold_int _hash__188_ (-378691891) in
                      _hash__188_))
    let _ = quickcheck_observer
    let quickcheck_shrinker =
      Poly_with_phantom.quickcheck_shrinker
        (Base_quickcheck.Shrinker.create
           (function | `phantom -> Base.Sequence.round_robin []))
    let _ = quickcheck_shrinker
  end
module Recursive =
  struct
    type t =
      | Leaf 
      | Node of t * t 
    let quickcheck_generator =
      Generator.recursive_union [Generator.return Leaf]
        ~f:(fun self ->
              [Generator.map2 self self ~f:(fun l -> fun r -> Node (l, r))])
    let quickcheck_observer =
      Observer.fixed_point
        (fun self ->
           (Observer.either Observer.unit (Observer.both self self)) |>
             (Observer.unmap
                ~f:(function
                    | Leaf -> Either.First ()
                    | Node (l, r) -> Either.Second (l, r))))
    let quickcheck_shrinker =
      let rec shrink =
        function
        | Leaf -> Sequence.empty
        | Node (l, r) ->
            Sequence.round_robin
              [Sequence.singleton l;
              Sequence.singleton r;
              Sequence.map (shrink l) ~f:(fun l -> Node (l, r));
              Sequence.map (shrink r) ~f:(fun r -> Node (l, r))] in
      Shrinker.create shrink
  end
module Extensions =
  struct
    type t = [ `A  | `B of (bool * unit option) ]
    let quickcheck_generator =
      Base_quickcheck.Generator.union
        [Base_quickcheck.Generator.create
           (fun ~size:_size__191_ -> fun ~random:_random__192_ -> `A);
        Base_quickcheck.Generator.create
          (fun ~size:_size__195_ ->
             fun ~random:_random__196_ ->
               `B
                 (Base_quickcheck.Generator.generate
                    (Base_quickcheck.Generator.create
                       (fun ~size:_size__193_ ->
                          fun ~random:_random__194_ ->
                            ((Base_quickcheck.Generator.generate
                                quickcheck_generator_bool ~size:_size__193_
                                ~random:_random__194_),
                              (Base_quickcheck.Generator.generate
                                 (quickcheck_generator_option
                                    quickcheck_generator_unit)
                                 ~size:_size__193_ ~random:_random__194_))))
                    ~size:_size__195_ ~random:_random__196_))]
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun _x__197_ ->
           fun ~size:_size__198_ ->
             fun ~hash:_hash__199_ ->
               match _x__197_ with
               | `A ->
                   let _hash__199_ = Base.hash_fold_int _hash__199_ 65 in
                   _hash__199_
               | `B _x__204_ ->
                   let _hash__199_ = Base.hash_fold_int _hash__199_ 66 in
                   let _hash__199_ =
                     Base_quickcheck.Observer.observe
                       (Base_quickcheck.Observer.create
                          (fun (_x__200_, _x__201_) ->
                             fun ~size:_size__202_ ->
                               fun ~hash:_hash__203_ ->
                                 let _hash__203_ =
                                   Base_quickcheck.Observer.observe
                                     quickcheck_observer_bool _x__200_
                                     ~size:_size__202_ ~hash:_hash__203_ in
                                 let _hash__203_ =
                                   Base_quickcheck.Observer.observe
                                     (quickcheck_observer_option
                                        quickcheck_observer_unit) _x__201_
                                     ~size:_size__202_ ~hash:_hash__203_ in
                                 _hash__203_)) _x__204_ ~size:_size__198_
                       ~hash:_hash__199_ in
                   _hash__199_)
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (function
         | `A -> Base.Sequence.round_robin []
         | `B _x__205_ ->
             Base.Sequence.round_robin
               [Base.Sequence.map
                  (Base_quickcheck.Shrinker.shrink
                     (Base_quickcheck.Shrinker.create
                        (fun (_x__206_, _x__207_) ->
                           Base.Sequence.round_robin
                             [Base.Sequence.map
                                (Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_bool _x__206_)
                                ~f:(fun _x__206_ -> (_x__206_, _x__207_));
                             Base.Sequence.map
                               (Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_option
                                     quickcheck_shrinker_unit) _x__207_)
                               ~f:(fun _x__207_ -> (_x__206_, _x__207_))]))
                     _x__205_) ~f:(fun _x__205_ -> `B _x__205_)])
  end
module Escaped =
  struct
    type t = (int * char * bool option)
    let quickcheck_generator =
      Base_quickcheck.Generator.create
        (fun ~size:_size__208_ ->
           fun ~random:_random__209_ ->
             ((Base_quickcheck.Generator.generate
                 Generator.small_strictly_positive_int ~size:_size__208_
                 ~random:_random__209_),
               (Base_quickcheck.Generator.generate quickcheck_generator_char
                  ~size:_size__208_ ~random:_random__209_),
               (Base_quickcheck.Generator.generate
                  (quickcheck_generator_option quickcheck_generator_bool)
                  ~size:_size__208_ ~random:_random__209_)))
    let quickcheck_observer =
      Base_quickcheck.Observer.create
        (fun (_x__210_, _x__211_, _x__212_) ->
           fun ~size:_size__213_ ->
             fun ~hash:_hash__214_ ->
               let _hash__214_ =
                 Base_quickcheck.Observer.observe quickcheck_observer_int
                   _x__210_ ~size:_size__213_ ~hash:_hash__214_ in
               let _hash__214_ =
                 Base_quickcheck.Observer.observe Observer.opaque _x__211_
                   ~size:_size__213_ ~hash:_hash__214_ in
               let _hash__214_ =
                 Base_quickcheck.Observer.observe
                   (quickcheck_observer_option quickcheck_observer_bool)
                   _x__212_ ~size:_size__213_ ~hash:_hash__214_ in
               _hash__214_)
    let quickcheck_shrinker =
      Base_quickcheck.Shrinker.create
        (fun (_x__215_, _x__216_, _x__217_) ->
           Base.Sequence.round_robin
             [Base.Sequence.map
                (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_int
                   _x__215_)
                ~f:(fun _x__215_ -> (_x__215_, _x__216_, _x__217_));
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink quickcheck_shrinker_char
                  _x__216_)
               ~f:(fun _x__216_ -> (_x__215_, _x__216_, _x__217_));
             Base.Sequence.map
               (Base_quickcheck.Shrinker.shrink Shrinker.atomic _x__217_)
               ~f:(fun _x__217_ -> (_x__215_, _x__216_, _x__217_))])
  end
module Wildcard(Elt:sig type t val examples : t list end) =
  struct
    type t = Elt.t list
    let quickcheck_generator =
      Generator.list (Generator.of_list Elt.examples)
    let quickcheck_observer : t Observer.t =
      quickcheck_observer_list Base_quickcheck.Observer.opaque
    let quickcheck_shrinker : t Shrinker.t =
      quickcheck_shrinker_list Base_quickcheck.Shrinker.atomic
  end
