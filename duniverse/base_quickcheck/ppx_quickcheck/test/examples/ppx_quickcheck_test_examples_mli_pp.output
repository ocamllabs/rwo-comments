open Base
open Base_quickcheck
module Simple_reference :
sig
  type t = bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Dotted_reference :
sig
  type t = Simple_reference.t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Nonrec_reference :
sig
  open Dotted_reference
  type nonrec t = t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Application_of_polymorphic_type :
sig
  type t = bool option[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Tuple :
sig
  type t = (bool * unit option)[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Poly_variant :
sig
  type t =
    [ `A  | `B  | `C of bool  | `D of bool  | `E of (bool * unit option) 
    | `F of (bool * unit option) ][@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Inherit_poly_variant :
sig
  type t = [ `X  | Poly_variant.t | `Z of unit option ][@@deriving
                                                         quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Record_type :
sig
  type t = {
    x: bool ;
    y: unit option }[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Nullary_and_unary_variant :
sig
  type t =
    | A 
    | B 
    | C of unit 
    | D of unit [@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Binary_and_record_variant :
sig
  type t =
    | A of bool * [ `X  | `Y  | `Z of unit ] 
    | B of bool * [ `X  | `Y  | `Z of unit ] 
    | C of {
    x: unit option ;
    mutable y: bool } 
    | D of {
    x: unit option ;
    mutable y: bool } [@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Simple_arrow :
sig
  type t = unit option -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Named_arrow :
sig
  type t = x:unit option -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Optional_arrow :
sig
  type t = ?x:unit option -> unit -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Curried_arrow :
sig
  type t = unit option -> bool option -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Simple_higher_order :
sig
  type t = (unit option -> bool option) -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Named_higher_order :
sig
  type t = (x:unit option -> bool option) -> bool[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Optional_higher_order :
sig
  type t = (?x:unit option -> unit -> bool option) -> bool[@@deriving
                                                            quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Poly_unary :
sig
  type 'a t = 'a list[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator :
        'a Base_quickcheck.Generator.t -> 'a t Base_quickcheck.Generator.t
      val quickcheck_observer :
        'a Base_quickcheck.Observer.t -> 'a t Base_quickcheck.Observer.t
      val quickcheck_shrinker :
        'a Base_quickcheck.Shrinker.t -> 'a t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Instance_of_unary :
sig
  type t = bool Poly_unary.t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Poly_binary :
sig
  type ('a, 'b) t = ('a * 'b)[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator :
        'a Base_quickcheck.Generator.t ->
          'b Base_quickcheck.Generator.t ->
            ('a, 'b) t Base_quickcheck.Generator.t
      val quickcheck_observer :
        'a Base_quickcheck.Observer.t ->
          'b Base_quickcheck.Observer.t ->
            ('a, 'b) t Base_quickcheck.Observer.t
      val quickcheck_shrinker :
        'a Base_quickcheck.Shrinker.t ->
          'b Base_quickcheck.Shrinker.t ->
            ('a, 'b) t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Instance_of_binary :
sig
  type t = (bool, unit option) Poly_binary.t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Poly_with_variance :
sig
  type (-'a, +'b) t = ('b * ('a -> 'b))[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator :
        'a Base_quickcheck.Observer.t ->
          'b Base_quickcheck.Generator.t ->
            ('a, 'b) t Base_quickcheck.Generator.t
      val quickcheck_observer :
        'a Base_quickcheck.Generator.t ->
          'b Base_quickcheck.Observer.t ->
            ('a, 'b) t Base_quickcheck.Observer.t
      val quickcheck_shrinker :
        'a Base_quickcheck.Shrinker.t ->
          'b Base_quickcheck.Shrinker.t ->
            ('a, 'b) t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Instance_with_variance :
sig
  type t = (bool, unit option) Poly_with_variance.t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Poly_with_phantom :
sig
  type _ t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator :
        'v_x__003_ Base_quickcheck.Generator.t ->
          'v_x__003_ t Base_quickcheck.Generator.t
      val quickcheck_observer :
        'v_x__002_ Base_quickcheck.Observer.t ->
          'v_x__002_ t Base_quickcheck.Observer.t
      val quickcheck_shrinker :
        'v_x__001_ Base_quickcheck.Shrinker.t ->
          'v_x__001_ t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end with type _ t =  unit option
module Instance_with_phantom :
sig
  type t = [ `phantom ] Poly_with_phantom.t[@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Recursive :
sig
  type t =
    | Leaf 
    | Node of t * t [@@deriving quickcheck]
  include
    sig
      [@@@ocaml.warning "-32"]
      val quickcheck_generator : t Base_quickcheck.Generator.t
      val quickcheck_observer : t Base_quickcheck.Observer.t
      val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
    end[@@ocaml.doc "@inline"]
end
module Extensions :
sig
  type t = [ `A  | `B of (bool * unit option) ]
  val quickcheck_generator : t Generator.t
  val quickcheck_observer : t Observer.t
  val quickcheck_shrinker : t Shrinker.t
end
module Escaped :
sig
  type t = (int * char * bool option)
  val quickcheck_generator : t Generator.t
  val quickcheck_observer : t Observer.t
  val quickcheck_shrinker : t Shrinker.t
end
module Wildcard :
functor (Elt : sig type t val examples : t list end) ->
  sig
    type t = Elt.t list[@@deriving quickcheck]
    include
      sig
        [@@@ocaml.warning "-32"]
        val quickcheck_generator : t Base_quickcheck.Generator.t
        val quickcheck_observer : t Base_quickcheck.Observer.t
        val quickcheck_shrinker : t Base_quickcheck.Shrinker.t
      end[@@ocaml.doc "@inline"]
  end
