#silent true;;
#use "topfind";;
#thread;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Base;;

[@@@part "1"];;
"foo" = "bar";;
[%%expect{|
Characters 0-5:
Error: This expression has type string but an expression was expected of type
         int
|}];;

[@@@part "2"];;
open Base.Poly;;
"foo" = "bar";;
[%%expect ocaml {|- : bool = false|}];;
3 = 4;;
[%%expect ocaml {|- : bool = false|}];;
[1;2;3] = [1;2;3];;
[%%expect ocaml {|- : bool = true|}];;

[@@@part "3"];;
(=);;
[%%expect ocaml {|- : 'a -> 'a -> bool = <fun>|}];;

[@@@part "4"];;
let rec destutter = function
  | [] | [_] as l -> l
  | hd :: (hd' :: _ as tl) when hd = hd' -> destutter tl
  | hd :: tl -> hd :: destutter tl
;;
[%%expect ocaml {|val destutter : 'a list -> 'a list = <fun>|}];;
destutter [1;2;2;3;4;3;3];;
[%%expect ocaml {|- : int list = [1; 2; 3; 4; 3]|}];;
destutter ["one";"two";"two";"two";"three"];;
[%%expect ocaml {|- : string list = ["one"; "two"; "three"]|}];;

[@@@part "5"];;
(fun x -> x + 1) = (fun x -> x + 1);;
[%%expect{|Exception: (Invalid_argument "compare: functional value").|}];;

[@@@part "6"];;
open Base;;
[%%expect];;

  
